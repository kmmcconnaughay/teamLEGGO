Team LEGGO  
Kerry McConnaughay, Annie Kroo, Ana Krishnan, Anil Patel, Onur Talu  
Software architecture discussion   

**Agenda:**
Background  
What we hope to get out of this  
Architectural Discussion  
Key Questions  
Feedback  
Thank you  

**What do we hope to get out of this technical discussion?**

The focus of our technical discussion will be for us to explain our top-level code organization and decisions-making and receive constructive feedback on how we could approach our challenges differently or more effectively. To expand our horizons, we want to ask our peer teams for ideas of how to take our project further; we still want to use Legos, but we believe there is more potential. We also want to get feedback on approaches we could take that would set us up better for the stretch goals we already have. 

**Background**

This is the type of image we are intending to output when our user inputs a photo.
We chose to use Numpy and Pillow packages, because Numpy offers a variety of matrix operations that we can employ to work with and create new images - allowing us to do custom pixelation and forming new pixelated images from the original. Pillow - being an imaging library - gives loading and display functionality. We also employed Matplotlib in order to display pixelated images.

We chose Kivy as our GUI because it is more aesthetically pleasing than other GUIâ€™s. Kivy is a graphical user interface that combines many GUI libraries to provide an easy to use, aesthetic, and free user interface that has a multitude of capabilities. It seems straightforward to implement after learning about it, and has a lot of online support. 

We have already decided on a few stretch goals. The first is giving the user the choice of the size and the number of Lego Bricks they can use to build the image they chose. Another is being able to change the color scheme of the blocks used. For example, one version of the pixelated image would be in the original colors and the next version would recreate the image using shades of blue Legos or grayscaled.

**Architecture**

We have divided our project into a few different areas of focus as displayed above. Our code will be comprised of four sections each containing one of these areas. The user interface input will interface with the user and give the data from the user to the pixelation portion of our code. This will then pixelate the image and determine how many of each color lego is needed. This information will then be handed off to the HTML Parsing section which will scan the LEGO website and price each of the LEGOs needed to make up the image. The LEGO bricked image created by the pixelation portion will be displayed by the user interface output alongside the price generated by the HTML parser. 

**Key Questions Selected**

What do you want to learn from the review? What are the most important decisions your team is currently 
How can we make our code object oriented to make it more efficient for future steps?  
Is there a python library we could use to more efficiently pixelate our images? We are currently using pillow and numpy to perform array operations on the images in loops.  
We are currently facing problems with displaying our RGB values correctly. Are there any alternatives to matplotlib we can use to avoid this problem?  
What stretch goals should we gear our code most towards? Similarly, which stretch goal are most interesting?  
What would you want this program to return if you were our user?  



